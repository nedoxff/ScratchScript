//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../ScratchScript.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ScratchScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Whitespace=2, NewLine=3, Semicolon=4, LeftParen=5, RightParen=6, 
		LeftBracket=7, RightBracket=8, LeftBrace=9, RightBrace=10, Assignment=11, 
		Comma=12, Not=13, Arrow=14, Colon=15, Dot=16, Ternary=17, SingleLineCommentStart=18, 
		MultiLineCommentStart=19, MultiLineCommentEnd=20, Comment=21, LineComment=22, 
		At=23, Hashtag=24, Multiply=25, Plus=26, Minus=27, Divide=28, Power=29, 
		Modulus=30, And=31, Or=32, BitwiseAnd=33, BitwiseOr=34, BitwiseXor=35, 
		PostIncrement=36, PostDecrement=37, Greater=38, Lesser=39, GreaterOrEqual=40, 
		LesserOrEqual=41, Equal=42, NotEqual=43, AdditionAsignment=44, SubtractionAssignment=45, 
		MultiplicationAssignment=46, DivisionAssignment=47, ModulusAssignment=48, 
		PowerAssignment=49, If=50, Else=51, True=52, False=53, Break=54, Default=55, 
		Debugger=56, As=57, For=58, Case=59, Switch=60, While=61, VariableDeclare=62, 
		Import=63, ProcedureDeclare=64, Return=65, Throw=66, Repeat=67, Event=68, 
		From=69, Namespace=70, Type=71, Number=72, Identifier=73, String=74, Color=75;
	public const int
		RULE_program = 0, RULE_topLevelStatement = 1, RULE_line = 2, RULE_statement = 3, 
		RULE_eventStatement = 4, RULE_assignmentStatement = 5, RULE_listAssignmentStatement = 6, 
		RULE_variableDeclarationStatement = 7, RULE_memberProcedureCallStatement = 8, 
		RULE_procedureCallStatement = 9, RULE_procedureDeclarationStatement = 10, 
		RULE_ifStatement = 11, RULE_whileStatement = 12, RULE_forStatement = 13, 
		RULE_elseIfStatement = 14, RULE_postIncrementStatement = 15, RULE_importStatement = 16, 
		RULE_attributeStatement = 17, RULE_returnStatement = 18, RULE_repeatStatement = 19, 
		RULE_throwStatement = 20, RULE_breakStatement = 21, RULE_namespaceStatement = 22, 
		RULE_switchStatement = 23, RULE_typedIdentifier = 24, RULE_procedureArgument = 25, 
		RULE_debuggerStatement = 26, RULE_expression = 27, RULE_multiplyOperators = 28, 
		RULE_shiftOperators = 29, RULE_leftShift = 30, RULE_rightShift = 31, RULE_addOperators = 32, 
		RULE_compareOperators = 33, RULE_booleanOperators = 34, RULE_assignmentOperators = 35, 
		RULE_postIncrementOperators = 36, RULE_case = 37, RULE_block = 38, RULE_switchBlock = 39, 
		RULE_defaultCase = 40, RULE_importAll = 41, RULE_constant = 42, RULE_comment = 43, 
		RULE_boolean = 44, RULE_type = 45;
	public static readonly string[] ruleNames = {
		"program", "topLevelStatement", "line", "statement", "eventStatement", 
		"assignmentStatement", "listAssignmentStatement", "variableDeclarationStatement", 
		"memberProcedureCallStatement", "procedureCallStatement", "procedureDeclarationStatement", 
		"ifStatement", "whileStatement", "forStatement", "elseIfStatement", "postIncrementStatement", 
		"importStatement", "attributeStatement", "returnStatement", "repeatStatement", 
		"throwStatement", "breakStatement", "namespaceStatement", "switchStatement", 
		"typedIdentifier", "procedureArgument", "debuggerStatement", "expression", 
		"multiplyOperators", "shiftOperators", "leftShift", "rightShift", "addOperators", 
		"compareOperators", "booleanOperators", "assignmentOperators", "postIncrementOperators", 
		"case", "block", "switchBlock", "defaultCase", "importAll", "constant", 
		"comment", "boolean", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'List'", null, null, "';'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'='", "','", "'!'", "'->'", "':'", "'.'", "'?'", "'//'", "'/*'", 
		"'*/'", null, null, "'@'", "'#'", "'*'", "'+'", "'-'", "'/'", "'**'", 
		"'%'", "'&&'", "'||'", "'&'", "'|'", "'^'", "'++'", "'--'", "'>'", "'<'", 
		"'>='", "'<='", "'=='", "'!='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'**='", "'if'", "'else'", "'true'", "'false'", "'break'", "'default'", 
		"'debugger'", null, "'for'", null, "'switch'", "'while'", null, null, 
		null, null, null, "'repeat'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Whitespace", "NewLine", "Semicolon", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Assignment", 
		"Comma", "Not", "Arrow", "Colon", "Dot", "Ternary", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "LineComment", 
		"At", "Hashtag", "Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", 
		"And", "Or", "BitwiseAnd", "BitwiseOr", "BitwiseXor", "PostIncrement", 
		"PostDecrement", "Greater", "Lesser", "GreaterOrEqual", "LesserOrEqual", 
		"Equal", "NotEqual", "AdditionAsignment", "SubtractionAssignment", "MultiplicationAssignment", 
		"DivisionAssignment", "ModulusAssignment", "PowerAssignment", "If", "Else", 
		"True", "False", "Break", "Default", "Debugger", "As", "For", "Case", 
		"Switch", "While", "VariableDeclare", "Import", "ProcedureDeclare", "Return", 
		"Throw", "Repeat", "Event", "From", "Namespace", "Type", "Number", "Identifier", 
		"String", "Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & 179220395327489L) != 0)) {
				{
				{
				State = 92;
				topLevelStatement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement() {
			return GetRuleContext<AttributeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventStatementContext eventStatement() {
			return GetRuleContext<EventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceStatementContext namespaceStatement() {
			return GetRuleContext<NamespaceStatementContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				procedureDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				attributeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				eventStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				importStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				namespaceStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case LeftParen:
			case LeftBracket:
			case Not:
			case Plus:
			case Minus:
			case True:
			case False:
			case VariableDeclare:
			case Type:
			case Number:
			case Identifier:
			case String:
			case Color:
				{
				{
				State = 107;
				statement();
				State = 108;
				Match(Semicolon);
				}
				}
				break;
			case If:
				{
				State = 110;
				ifStatement();
				}
				break;
			case While:
				{
				State = 111;
				whileStatement();
				}
				break;
			case Repeat:
				{
				State = 112;
				repeatStatement();
				}
				break;
			case For:
				{
				State = 113;
				forStatement();
				}
				break;
			case Switch:
				{
				State = 114;
				switchStatement();
				}
				break;
			case Return:
				{
				State = 115;
				returnStatement();
				}
				break;
			case Break:
				{
				State = 116;
				breakStatement();
				}
				break;
			case Debugger:
				{
				State = 117;
				debuggerStatement();
				}
				break;
			case Throw:
				{
				State = 118;
				throwStatement();
				}
				break;
			case Comment:
				{
				State = 119;
				comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAssignmentStatementContext listAssignmentStatement() {
			return GetRuleContext<ListAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberProcedureCallStatementContext memberProcedureCallStatement() {
			return GetRuleContext<MemberProcedureCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementStatementContext postIncrementStatement() {
			return GetRuleContext<PostIncrementStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				listAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				procedureCallStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				memberProcedureCallStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126;
				variableDeclarationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 127;
				postIncrementStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchScriptParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public EventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStatementContext eventStatement() {
		EventStatementContext _localctx = new EventStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_eventStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(Event);
			State = 131;
			Match(Identifier);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 132;
				Match(LeftParen);
				{
				State = 133;
				expression(0);
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 134;
						Match(Comma);
						State = 135;
						expression(0);
						}
						} 
					}
					State = 140;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				State = 141;
				Match(RightParen);
				}
			}

			State = 145;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorsContext assignmentOperators() {
			return GetRuleContext<AssignmentOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Identifier);
			State = 148;
			assignmentOperators();
			State = 149;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		public ListAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterListAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitListAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAssignmentStatementContext listAssignmentStatement() {
		ListAssignmentStatementContext _localctx = new ListAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_listAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(Identifier);
			State = 152;
			Match(LeftBracket);
			State = 153;
			expression(0);
			State = 154;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VariableDeclare() { return GetToken(ScratchScriptParser.VariableDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(VariableDeclare);
			State = 157;
			Match(Identifier);
			State = 158;
			Match(Assignment);
			State = 159;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberProcedureCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public MemberProcedureCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberProcedureCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMemberProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMemberProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberProcedureCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberProcedureCallStatementContext memberProcedureCallStatement() {
		MemberProcedureCallStatementContext _localctx = new MemberProcedureCallStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_memberProcedureCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			expression(0);
			State = 162;
			Match(Dot);
			State = 163;
			procedureCallStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext[] procedureArgument() {
			return GetRuleContexts<ProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext procedureArgument(int i) {
			return GetRuleContext<ProcedureArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ProcedureCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallStatementContext procedureCallStatement() {
		ProcedureCallStatementContext _localctx = new ProcedureCallStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_procedureCallStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(Identifier);
			State = 166;
			Match(LeftParen);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083446434L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 31L) != 0)) {
				{
				State = 167;
				procedureArgument();
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 168;
						Match(Comma);
						State = 169;
						procedureArgument();
						}
						} 
					}
					State = 174;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
			}

			State = 177;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProcedureDeclare() { return GetToken(ScratchScriptParser.ProcedureDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext[] attributeStatement() {
			return GetRuleContexts<AttributeStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement(int i) {
			return GetRuleContext<AttributeStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentifierContext[] typedIdentifier() {
			return GetRuleContexts<TypedIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdentifierContext typedIdentifier(int i) {
			return GetRuleContext<TypedIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_procedureDeclarationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 179;
					attributeStatement();
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 185;
			Match(ProcedureDeclare);
			State = 186;
			Match(Identifier);
			State = 187;
			Match(LeftParen);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 188;
				typedIdentifier();
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 189;
						Match(Comma);
						State = 190;
						typedIdentifier();
						}
						} 
					}
					State = 195;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
			}

			State = 198;
			Match(RightParen);
			State = 199;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(ScratchScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(ScratchScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(If);
			State = 202;
			Match(LeftParen);
			State = 203;
			expression(0);
			State = 204;
			Match(RightParen);
			State = 205;
			block();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 206;
				Match(Else);
				State = 207;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(ScratchScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(While);
			State = 211;
			Match(LeftParen);
			State = 212;
			expression(0);
			State = 213;
			Match(RightParen);
			State = 214;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(ScratchScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(ScratchScriptParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(ScratchScriptParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(For);
			State = 217;
			Match(LeftParen);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4625196817510834338L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 31L) != 0)) {
				{
				State = 218;
				statement();
				}
			}

			State = 221;
			Match(Semicolon);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083446434L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 31L) != 0)) {
				{
				State = 222;
				expression(0);
				}
			}

			State = 225;
			Match(Semicolon);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4625196817510834338L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 31L) != 0)) {
				{
				State = 226;
				statement();
				}
			}

			State = 229;
			Match(RightParen);
			State = 230;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_elseIfStatement);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostIncrementOperatorsContext postIncrementOperators() {
			return GetRuleContext<PostIncrementOperatorsContext>(0);
		}
		public PostIncrementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterPostIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitPostIncrementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementStatementContext postIncrementStatement() {
		PostIncrementStatementContext _localctx = new PostIncrementStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_postIncrementStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(Identifier);
			State = 237;
			postIncrementOperators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(ScratchScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(ScratchScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAllContext importAll() {
			return GetRuleContext<ImportAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(ScratchScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(ScratchScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_importStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(Import);
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				{
				{
				State = 240;
				Match(LeftBrace);
				State = 241;
				Match(Identifier);
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 242;
						Match(Comma);
						State = 243;
						Match(Identifier);
						}
						} 
					}
					State = 248;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 249;
				Match(RightBrace);
				}
				}
				break;
			case Multiply:
				{
				State = 250;
				importAll();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 253;
			Match(From);
			State = 254;
			Match(String);
			State = 255;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(ScratchScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public AttributeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStatementContext attributeStatement() {
		AttributeStatementContext _localctx = new AttributeStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_attributeStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(At);
			State = 258;
			Match(Identifier);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 259;
				Match(LeftParen);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510798882111490L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 27L) != 0)) {
					{
					State = 260;
					constant();
					State = 265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 261;
							Match(Comma);
							State = 262;
							constant();
							}
							} 
						}
						State = 267;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					}
					}
				}

				State = 270;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(ScratchScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(Return);
			State = 274;
			expression(0);
			State = 275;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(ScratchScriptParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(Repeat);
			State = 278;
			Match(LeftParen);
			State = 279;
			expression(0);
			State = 280;
			Match(RightParen);
			State = 281;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(ScratchScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(Throw);
			State = 284;
			Match(String);
			State = 285;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(ScratchScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(Break);
			State = 288;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(ScratchScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public NamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStatementContext namespaceStatement() {
		NamespaceStatementContext _localctx = new NamespaceStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_namespaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(Namespace);
			State = 291;
			Match(String);
			State = 292;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(ScratchScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(Switch);
			State = 295;
			Match(LeftParen);
			State = 296;
			expression(0);
			State = 297;
			Match(RightParen);
			State = 298;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterTypedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitTypedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdentifierContext typedIdentifier() {
		TypedIdentifierContext _localctx = new TypedIdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_typedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(Identifier);
			State = 301;
			Match(Colon);
			State = 302;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentContext procedureArgument() {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 50, RULE_procedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 304;
				Match(Identifier);
				State = 305;
				Match(Colon);
				}
				break;
			}
			State = 308;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(ScratchScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(Debugger);
			State = 311;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBitwiseAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(ScratchScriptParser.BitwiseAnd, 0); }
		public BinaryBitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(ScratchScriptParser.BitwiseOr, 0); }
		public BinaryBitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(ScratchScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayInitializeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ArrayInitializeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseShiftExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorsContext shiftOperators() {
			return GetRuleContext<ShiftOperatorsContext>(0);
		}
		public BinaryBitwiseShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProcedureCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public ProcedureCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseXorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(ScratchScriptParser.BitwiseXor, 0); }
		public BinaryBitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ternary() { return GetToken(ScratchScriptParser.Ternary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberProcedureCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public MemberProcedureCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMemberProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMemberProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberProcedureCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 314;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 315;
				Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new ProcedureCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				procedureCallStatement();
				}
				break;
			case 4:
				{
				_localctx = new ArrayInitializeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 317;
				Match(LeftBracket);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510799083446434L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 31L) != 0)) {
					{
					State = 318;
					expression(0);
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 319;
							Match(Comma);
							State = 320;
							expression(0);
							}
							} 
						}
						State = 325;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
					}
					}
				}

				State = 328;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329;
				Match(LeftParen);
				State = 330;
				expression(0);
				State = 331;
				Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 333;
				Match(Not);
				State = 334;
				expression(12);
				}
				break;
			case 7:
				{
				_localctx = new UnaryAddExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				addOperators();
				State = 336;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 383;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new BinaryBitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 341;
						Match(BitwiseOr);
						State = 342;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new BinaryBitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 343;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 344;
						Match(BitwiseXor);
						State = 345;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new BinaryBitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 347;
						Match(BitwiseAnd);
						State = 348;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new BinaryBitwiseShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 350;
						shiftOperators();
						State = 351;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new BinaryMultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 354;
						multiplyOperators();
						State = 355;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new BinaryAddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 357;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 358;
						addOperators();
						State = 359;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new BinaryCompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 361;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 362;
						compareOperators();
						State = 363;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new BinaryBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 365;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 366;
						booleanOperators();
						State = 367;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 369;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 370;
						Match(Ternary);
						State = 371;
						expression(0);
						State = 372;
						Match(Colon);
						State = 373;
						expression(2);
						}
						break;
					case 10:
						{
						_localctx = new MemberProcedureCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 375;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 376;
						Match(Dot);
						State = 377;
						procedureCallStatement();
						}
						break;
					case 11:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 378;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 379;
						Match(LeftBracket);
						State = 380;
						expression(0);
						State = 381;
						Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(ScratchScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(ScratchScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(ScratchScriptParser.Modulus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(ScratchScriptParser.Power, 0); }
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1912602624L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftShiftContext leftShift() {
			return GetRuleContext<LeftShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ShiftOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterShiftOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitShiftOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorsContext shiftOperators() {
		ShiftOperatorsContext _localctx = new ShiftOperatorsContext(Context, State);
		EnterRule(_localctx, 58, RULE_shiftOperators);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lesser:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				leftShift();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				rightShift();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Lesser() { return GetTokens(ScratchScriptParser.Lesser); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser(int i) {
			return GetToken(ScratchScriptParser.Lesser, i);
		}
		public LeftShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftShiftContext leftShift() {
		LeftShiftContext _localctx = new LeftShiftContext(Context, State);
		EnterRule(_localctx, 60, RULE_leftShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_localctx.first = Match(Lesser);
			State = 395;
			_localctx.second = Match(Lesser);
			State = 396;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(ScratchScriptParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(ScratchScriptParser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 62, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_localctx.first = Match(Greater);
			State = 399;
			_localctx.second = Match(Greater);
			State = 400;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(ScratchScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchScriptParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 64, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(ScratchScriptParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(ScratchScriptParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ScratchScriptParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(ScratchScriptParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(ScratchScriptParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LesserOrEqual() { return GetToken(ScratchScriptParser.LesserOrEqual, 0); }
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 66, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17317308137472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(ScratchScriptParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(ScratchScriptParser.Or, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 68, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdditionAsignment() { return GetToken(ScratchScriptParser.AdditionAsignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubtractionAssignment() { return GetToken(ScratchScriptParser.SubtractionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplicationAssignment() { return GetToken(ScratchScriptParser.MultiplicationAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivisionAssignment() { return GetToken(ScratchScriptParser.DivisionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssignment() { return GetToken(ScratchScriptParser.ModulusAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssignment() { return GetToken(ScratchScriptParser.PowerAssignment, 0); }
		public AssignmentOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorsContext assignmentOperators() {
		AssignmentOperatorsContext _localctx = new AssignmentOperatorsContext(Context, State);
		EnterRule(_localctx, 70, RULE_assignmentOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1108307720800256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PostIncrement() { return GetToken(ScratchScriptParser.PostIncrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PostDecrement() { return GetToken(ScratchScriptParser.PostDecrement, 0); }
		public PostIncrementOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterPostIncrementOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitPostIncrementOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementOperatorsContext postIncrementOperators() {
		PostIncrementOperatorsContext _localctx = new PostIncrementOperatorsContext(Context, State);
		EnterRule(_localctx, 72, RULE_postIncrementOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !(_la==PostIncrement || _la==PostDecrement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(ScratchScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 74, RULE_case);
		try {
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 412;
				Match(Case);
				State = 413;
				constant();
				State = 414;
				Match(Colon);
				State = 415;
				block();
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				defaultCase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(LeftBrace);
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8463389599939436706L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1991L) != 0)) {
				{
				{
				State = 421;
				line();
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 427;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(LeftBrace);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Default || _la==Case) {
				{
				{
				State = 430;
				@case();
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 436;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(ScratchScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_defaultCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(Default);
			State = 439;
			Match(Colon);
			State = 440;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAllContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(ScratchScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(ScratchScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public ImportAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterImportAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitImportAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAllContext importAll() {
		ImportAllContext _localctx = new ImportAllContext(Context, State);
		EnterRule(_localctx, 82, RULE_importAll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(Multiply);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 443;
				Match(As);
				State = 444;
				Match(Identifier);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchScriptParser.Color, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 84, RULE_constant);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				Match(Number);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(String);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449;
				boolean();
				}
				break;
			case Color:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450;
				Match(Color);
				}
				break;
			case T__0:
			case Type:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(ScratchScriptParser.Comment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 86, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(ScratchScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(ScratchScriptParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 88, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(ScratchScriptParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(ScratchScriptParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ScratchScriptParser.Greater, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_type);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 458;
				Match(Type);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(T__0);
				State = 460;
				Match(Lesser);
				State = 461;
				type();
				State = 462;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 30: return leftShift_sempred((LeftShiftContext)_localctx, predIndex);
		case 31: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}
	private bool leftShift_sempred(LeftShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,5,0,94,8,0,10,0,12,0,97,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,3,1,106,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,121,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,129,8,3,1,4,1,4,
		1,4,1,4,1,4,1,4,5,4,137,8,4,10,4,12,4,140,9,4,1,4,1,4,3,4,144,8,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,171,8,9,10,9,12,9,174,9,9,3,9,176,8,9,1,
		9,1,9,1,10,5,10,181,8,10,10,10,12,10,184,9,10,1,10,1,10,1,10,1,10,1,10,
		1,10,5,10,192,8,10,10,10,12,10,195,9,10,3,10,197,8,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,209,8,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,3,13,220,8,13,1,13,1,13,3,13,224,8,13,1,13,1,13,3,
		13,228,8,13,1,13,1,13,1,13,1,14,1,14,3,14,235,8,14,1,15,1,15,1,15,1,16,
		1,16,1,16,1,16,1,16,5,16,245,8,16,10,16,12,16,248,9,16,1,16,1,16,3,16,
		252,8,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,264,8,
		17,10,17,12,17,267,9,17,3,17,269,8,17,1,17,3,17,272,8,17,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
		1,25,1,25,3,25,307,8,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,5,27,322,8,27,10,27,12,27,325,9,27,3,27,327,8,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,339,8,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,384,
		8,27,10,27,12,27,387,9,27,1,28,1,28,1,29,1,29,3,29,393,8,29,1,30,1,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
		1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,419,8,37,1,38,1,38,5,38,423,
		8,38,10,38,12,38,426,9,38,1,38,1,38,1,39,1,39,5,39,432,8,39,10,39,12,39,
		435,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,446,8,41,1,
		42,1,42,1,42,1,42,1,42,3,42,453,8,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,
		1,45,1,45,1,45,3,45,465,8,45,1,45,7,138,172,182,193,246,265,323,1,54,46,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,0,7,2,0,
		25,25,28,30,1,0,26,27,1,0,38,43,1,0,31,32,2,0,11,11,44,49,1,0,36,37,1,
		0,52,53,487,0,95,1,0,0,0,2,105,1,0,0,0,4,120,1,0,0,0,6,128,1,0,0,0,8,130,
		1,0,0,0,10,147,1,0,0,0,12,151,1,0,0,0,14,156,1,0,0,0,16,161,1,0,0,0,18,
		165,1,0,0,0,20,182,1,0,0,0,22,201,1,0,0,0,24,210,1,0,0,0,26,216,1,0,0,
		0,28,234,1,0,0,0,30,236,1,0,0,0,32,239,1,0,0,0,34,257,1,0,0,0,36,273,1,
		0,0,0,38,277,1,0,0,0,40,283,1,0,0,0,42,287,1,0,0,0,44,290,1,0,0,0,46,294,
		1,0,0,0,48,300,1,0,0,0,50,306,1,0,0,0,52,310,1,0,0,0,54,338,1,0,0,0,56,
		388,1,0,0,0,58,392,1,0,0,0,60,394,1,0,0,0,62,398,1,0,0,0,64,402,1,0,0,
		0,66,404,1,0,0,0,68,406,1,0,0,0,70,408,1,0,0,0,72,410,1,0,0,0,74,418,1,
		0,0,0,76,420,1,0,0,0,78,429,1,0,0,0,80,438,1,0,0,0,82,442,1,0,0,0,84,452,
		1,0,0,0,86,454,1,0,0,0,88,456,1,0,0,0,90,464,1,0,0,0,92,94,3,2,1,0,93,
		92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,
		95,1,0,0,0,98,99,5,0,0,1,99,1,1,0,0,0,100,106,3,20,10,0,101,106,3,34,17,
		0,102,106,3,8,4,0,103,106,3,32,16,0,104,106,3,44,22,0,105,100,1,0,0,0,
		105,101,1,0,0,0,105,102,1,0,0,0,105,103,1,0,0,0,105,104,1,0,0,0,106,3,
		1,0,0,0,107,108,3,6,3,0,108,109,5,4,0,0,109,121,1,0,0,0,110,121,3,22,11,
		0,111,121,3,24,12,0,112,121,3,38,19,0,113,121,3,26,13,0,114,121,3,46,23,
		0,115,121,3,36,18,0,116,121,3,42,21,0,117,121,3,52,26,0,118,121,3,40,20,
		0,119,121,3,86,43,0,120,107,1,0,0,0,120,110,1,0,0,0,120,111,1,0,0,0,120,
		112,1,0,0,0,120,113,1,0,0,0,120,114,1,0,0,0,120,115,1,0,0,0,120,116,1,
		0,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,5,1,0,0,0,122,
		129,3,10,5,0,123,129,3,12,6,0,124,129,3,18,9,0,125,129,3,16,8,0,126,129,
		3,14,7,0,127,129,3,30,15,0,128,122,1,0,0,0,128,123,1,0,0,0,128,124,1,0,
		0,0,128,125,1,0,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,7,1,0,0,0,130,
		131,5,68,0,0,131,143,5,73,0,0,132,133,5,5,0,0,133,138,3,54,27,0,134,135,
		5,12,0,0,135,137,3,54,27,0,136,134,1,0,0,0,137,140,1,0,0,0,138,139,1,0,
		0,0,138,136,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,6,0,0,142,
		144,1,0,0,0,143,132,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,3,
		76,38,0,146,9,1,0,0,0,147,148,5,73,0,0,148,149,3,70,35,0,149,150,3,54,
		27,0,150,11,1,0,0,0,151,152,5,73,0,0,152,153,5,7,0,0,153,154,3,54,27,0,
		154,155,5,8,0,0,155,13,1,0,0,0,156,157,5,62,0,0,157,158,5,73,0,0,158,159,
		5,11,0,0,159,160,3,54,27,0,160,15,1,0,0,0,161,162,3,54,27,0,162,163,5,
		16,0,0,163,164,3,18,9,0,164,17,1,0,0,0,165,166,5,73,0,0,166,175,5,5,0,
		0,167,172,3,50,25,0,168,169,5,12,0,0,169,171,3,50,25,0,170,168,1,0,0,0,
		171,174,1,0,0,0,172,173,1,0,0,0,172,170,1,0,0,0,173,176,1,0,0,0,174,172,
		1,0,0,0,175,167,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,5,6,0,
		0,178,19,1,0,0,0,179,181,3,34,17,0,180,179,1,0,0,0,181,184,1,0,0,0,182,
		183,1,0,0,0,182,180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,
		64,0,0,186,187,5,73,0,0,187,196,5,5,0,0,188,193,3,48,24,0,189,190,5,12,
		0,0,190,192,3,48,24,0,191,189,1,0,0,0,192,195,1,0,0,0,193,194,1,0,0,0,
		193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,196,188,1,0,0,0,196,197,
		1,0,0,0,197,198,1,0,0,0,198,199,5,6,0,0,199,200,3,76,38,0,200,21,1,0,0,
		0,201,202,5,50,0,0,202,203,5,5,0,0,203,204,3,54,27,0,204,205,5,6,0,0,205,
		208,3,76,38,0,206,207,5,51,0,0,207,209,3,28,14,0,208,206,1,0,0,0,208,209,
		1,0,0,0,209,23,1,0,0,0,210,211,5,61,0,0,211,212,5,5,0,0,212,213,3,54,27,
		0,213,214,5,6,0,0,214,215,3,76,38,0,215,25,1,0,0,0,216,217,5,58,0,0,217,
		219,5,5,0,0,218,220,3,6,3,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,
		0,0,0,221,223,5,4,0,0,222,224,3,54,27,0,223,222,1,0,0,0,223,224,1,0,0,
		0,224,225,1,0,0,0,225,227,5,4,0,0,226,228,3,6,3,0,227,226,1,0,0,0,227,
		228,1,0,0,0,228,229,1,0,0,0,229,230,5,6,0,0,230,231,3,76,38,0,231,27,1,
		0,0,0,232,235,3,76,38,0,233,235,3,22,11,0,234,232,1,0,0,0,234,233,1,0,
		0,0,235,29,1,0,0,0,236,237,5,73,0,0,237,238,3,72,36,0,238,31,1,0,0,0,239,
		251,5,63,0,0,240,241,5,9,0,0,241,246,5,73,0,0,242,243,5,12,0,0,243,245,
		5,73,0,0,244,242,1,0,0,0,245,248,1,0,0,0,246,247,1,0,0,0,246,244,1,0,0,
		0,247,249,1,0,0,0,248,246,1,0,0,0,249,252,5,10,0,0,250,252,3,82,41,0,251,
		240,1,0,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,254,5,69,0,0,254,255,5,
		74,0,0,255,256,5,4,0,0,256,33,1,0,0,0,257,258,5,23,0,0,258,271,5,73,0,
		0,259,268,5,5,0,0,260,265,3,84,42,0,261,262,5,12,0,0,262,264,3,84,42,0,
		263,261,1,0,0,0,264,267,1,0,0,0,265,266,1,0,0,0,265,263,1,0,0,0,266,269,
		1,0,0,0,267,265,1,0,0,0,268,260,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,
		0,270,272,5,6,0,0,271,259,1,0,0,0,271,272,1,0,0,0,272,35,1,0,0,0,273,274,
		5,65,0,0,274,275,3,54,27,0,275,276,5,4,0,0,276,37,1,0,0,0,277,278,5,67,
		0,0,278,279,5,5,0,0,279,280,3,54,27,0,280,281,5,6,0,0,281,282,3,76,38,
		0,282,39,1,0,0,0,283,284,5,66,0,0,284,285,5,74,0,0,285,286,5,4,0,0,286,
		41,1,0,0,0,287,288,5,54,0,0,288,289,5,4,0,0,289,43,1,0,0,0,290,291,5,70,
		0,0,291,292,5,74,0,0,292,293,5,4,0,0,293,45,1,0,0,0,294,295,5,60,0,0,295,
		296,5,5,0,0,296,297,3,54,27,0,297,298,5,6,0,0,298,299,3,78,39,0,299,47,
		1,0,0,0,300,301,5,73,0,0,301,302,5,15,0,0,302,303,3,90,45,0,303,49,1,0,
		0,0,304,305,5,73,0,0,305,307,5,15,0,0,306,304,1,0,0,0,306,307,1,0,0,0,
		307,308,1,0,0,0,308,309,3,54,27,0,309,51,1,0,0,0,310,311,5,56,0,0,311,
		312,5,4,0,0,312,53,1,0,0,0,313,314,6,27,-1,0,314,339,3,84,42,0,315,339,
		5,73,0,0,316,339,3,18,9,0,317,326,5,7,0,0,318,323,3,54,27,0,319,320,5,
		12,0,0,320,322,3,54,27,0,321,319,1,0,0,0,322,325,1,0,0,0,323,324,1,0,0,
		0,323,321,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,326,318,1,0,0,0,326,
		327,1,0,0,0,327,328,1,0,0,0,328,339,5,8,0,0,329,330,5,5,0,0,330,331,3,
		54,27,0,331,332,5,6,0,0,332,339,1,0,0,0,333,334,5,13,0,0,334,339,3,54,
		27,12,335,336,3,64,32,0,336,337,3,54,27,10,337,339,1,0,0,0,338,313,1,0,
		0,0,338,315,1,0,0,0,338,316,1,0,0,0,338,317,1,0,0,0,338,329,1,0,0,0,338,
		333,1,0,0,0,338,335,1,0,0,0,339,385,1,0,0,0,340,341,10,9,0,0,341,342,5,
		34,0,0,342,384,3,54,27,10,343,344,10,8,0,0,344,345,5,35,0,0,345,384,3,
		54,27,9,346,347,10,7,0,0,347,348,5,33,0,0,348,384,3,54,27,8,349,350,10,
		6,0,0,350,351,3,58,29,0,351,352,3,54,27,7,352,384,1,0,0,0,353,354,10,5,
		0,0,354,355,3,56,28,0,355,356,3,54,27,6,356,384,1,0,0,0,357,358,10,4,0,
		0,358,359,3,64,32,0,359,360,3,54,27,5,360,384,1,0,0,0,361,362,10,3,0,0,
		362,363,3,66,33,0,363,364,3,54,27,4,364,384,1,0,0,0,365,366,10,2,0,0,366,
		367,3,68,34,0,367,368,3,54,27,3,368,384,1,0,0,0,369,370,10,1,0,0,370,371,
		5,17,0,0,371,372,3,54,27,0,372,373,5,15,0,0,373,374,3,54,27,2,374,384,
		1,0,0,0,375,376,10,15,0,0,376,377,5,16,0,0,377,384,3,18,9,0,378,379,10,
		11,0,0,379,380,5,7,0,0,380,381,3,54,27,0,381,382,5,8,0,0,382,384,1,0,0,
		0,383,340,1,0,0,0,383,343,1,0,0,0,383,346,1,0,0,0,383,349,1,0,0,0,383,
		353,1,0,0,0,383,357,1,0,0,0,383,361,1,0,0,0,383,365,1,0,0,0,383,369,1,
		0,0,0,383,375,1,0,0,0,383,378,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,
		385,386,1,0,0,0,386,55,1,0,0,0,387,385,1,0,0,0,388,389,7,0,0,0,389,57,
		1,0,0,0,390,393,3,60,30,0,391,393,3,62,31,0,392,390,1,0,0,0,392,391,1,
		0,0,0,393,59,1,0,0,0,394,395,5,39,0,0,395,396,5,39,0,0,396,397,4,30,11,
		1,397,61,1,0,0,0,398,399,5,38,0,0,399,400,5,38,0,0,400,401,4,31,12,1,401,
		63,1,0,0,0,402,403,7,1,0,0,403,65,1,0,0,0,404,405,7,2,0,0,405,67,1,0,0,
		0,406,407,7,3,0,0,407,69,1,0,0,0,408,409,7,4,0,0,409,71,1,0,0,0,410,411,
		7,5,0,0,411,73,1,0,0,0,412,413,5,59,0,0,413,414,3,84,42,0,414,415,5,15,
		0,0,415,416,3,76,38,0,416,419,1,0,0,0,417,419,3,80,40,0,418,412,1,0,0,
		0,418,417,1,0,0,0,419,75,1,0,0,0,420,424,5,9,0,0,421,423,3,4,2,0,422,421,
		1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,
		0,426,424,1,0,0,0,427,428,5,10,0,0,428,77,1,0,0,0,429,433,5,9,0,0,430,
		432,3,74,37,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,
		1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,437,5,10,0,0,437,79,1,0,0,
		0,438,439,5,55,0,0,439,440,5,15,0,0,440,441,3,76,38,0,441,81,1,0,0,0,442,
		445,5,25,0,0,443,444,5,57,0,0,444,446,5,73,0,0,445,443,1,0,0,0,445,446,
		1,0,0,0,446,83,1,0,0,0,447,453,5,72,0,0,448,453,5,74,0,0,449,453,3,88,
		44,0,450,453,5,75,0,0,451,453,3,90,45,0,452,447,1,0,0,0,452,448,1,0,0,
		0,452,449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,85,1,0,0,0,454,455,
		5,21,0,0,455,87,1,0,0,0,456,457,7,6,0,0,457,89,1,0,0,0,458,465,5,71,0,
		0,459,460,5,1,0,0,460,461,5,39,0,0,461,462,3,90,45,0,462,463,5,38,0,0,
		463,465,1,0,0,0,464,458,1,0,0,0,464,459,1,0,0,0,465,91,1,0,0,0,34,95,105,
		120,128,138,143,172,175,182,193,196,208,219,223,227,234,246,251,265,268,
		271,306,323,326,338,383,385,392,418,424,433,445,452,464
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
