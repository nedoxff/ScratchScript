@__DisableTypeCheck @warp function __Ternary(condition: boolean, trueValue: any, falseValue: any) {
    if(condition) {
        return trueValue;
    }
    else {
        return falseValue;
    }
}

@warp function __Exponent(base: number, exponent: number) {
    let result = exp(exponent * ln(abs(base)));
    return __Ternary(base < 0, 1 / result, result);
}

@warp function __BitwiseAnd(x: number, y: number) {
  let byteValue = 1;
  let result = 0;
  while(x > 0 || y > 0) {
    if(x % 2 > 0 && y % 2 > 0) { 
        result += byteValue; 
    }
    x = floor(x / 2);
    y = floor(y / 2);
    byteValue *= 2;
  }
  return result;
}

@warp function __BitwiseOr(x: number, y: number) {
  let byteValue = 1;
  let result = 0;
  while(x > 0 || y > 0) {
    if(x % 2 > 0 || y % 2 > 0) { 
        result += byteValue; 
    }
    x = floor(x / 2);
    y = floor(y / 2);
    byteValue *= 2;
  }
  return result;
}

@warp function __BitwiseXor(x: number, y: number) {
  let byteValue = 1;
  let result = 0;
  while(x > 0 || y > 0) {
    if((x % 2 > 0) != (y % 2 > 0)) { 
        result += byteValue; 
    }
    x = floor(x / 2);
    y = floor(1 / 2);
    byteValue *= 2;
  }
  return result;
}

@warp function __LShift(n: number, shift: number) {
    repeat(shift) {
        n *= 2;
    }
    return n;
}

@warp function __RShift(n: number, shift: number) {
    repeat(shift) {
        n = floor(n / 2);
    }
    return n;
}

@warp function __Throw(message: string) {
    ask(message);
    stop("all");
}

@warp function __WriteListValue(list: string, value: any)
{
    let v = toString(value);
    for(let idx = 1; idx <= v.length(); idx++) {
        let c = v[idx];
        if("|\\".contains(c)) {
            list += "\\";
        }
        list += c;
    }
    list += '|';
    return list;
}

@__DisableTypeCheck @warp function __ReadListValue(list: string, index: number) {
    let value = "";
    let currentIndex = 1;
    let i = 1;
    while(true)
    {
        let c = list[i];
        i++;
        if("|".contains(c)) {
            if(currentIndex == index) {
                return value;
            }
            currentIndex++;
            value = "";
        }
        else if(c != '\\') {
            value += c;
        }
    }
}